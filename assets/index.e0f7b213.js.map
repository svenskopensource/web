{"version":3,"file":"index.e0f7b213.js","sources":["../../vite/modulepreload-polyfill","../../vertexShader.vert","../../fragmentShader.frag","../../globe.js"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","export const vertexShader = `\r\nuniform float time;\r\n//varying vec2 vUv;\r\n//varying vec3 vPosition;\r\nvarying float vColorRandoms;\r\n\r\nattribute float randoms;\r\nattribute float colorRandoms;\r\nvoid main()\t{\r\n    //vUv= uv;\r\n    vColorRandoms= colorRandoms;\r\n    vec4 mvPosition = modelViewMatrix* vec4(position, 1.);\r\n    gl_PointSize = 3. +(100. * randoms ) * (1. / -mvPosition.z);\r\n    gl_Position = projectionMatrix * mvPosition;// vec4( position, 1.0 );\r\n}\r\n`;","export const fragmentShader = `\r\nuniform float time;\r\n//uniform vec2 resolution;\r\n\r\nuniform vec3 uColor1;\r\nuniform vec3 uColor2;\r\nuniform vec3 uColor3;\r\n\r\nvarying float vColorRandoms;\r\n\r\nvoid main()\t{\r\n\r\n    float disc = smoothstep(0.5,-0.3,length(gl_PointCoord - vec2(0.5)));\r\n\r\n    vec3 finalColor = uColor1;\r\n    if(vColorRandoms > .33) {\r\n        finalColor = uColor2;\r\n    } \r\n    if(vColorRandoms > .66) {\r\n        finalColor = uColor3;\r\n    }\r\n    //float x = mod(time + gl_FragCoord.x, 20.) < 10. ? 1. : 0.;\r\n    //float y = mod(time + gl_FragCoord.y, 20.) < 10. ? 1. : 0.;\r\n    //gl_FragColor = vec4(finalColor, 1.0);\r\n    gl_FragColor =  vec4(finalColor, disc);\r\n}\r\n\r\n`;\r\n\r\nexport default fragmentShader;","\r\nimport * as THREE from \"three\";\r\nimport {vertexShader} from \"./vertexShader.vert\";\r\nimport {fragmentShader} from \"./fragmentShader.frag\";\r\n//import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\r\n\r\n// import {\r\n//   PostProcessRenderer,\r\n//   ChromaticAberrationShaderPass,\r\n// } from \"threejs-postprocess\";\r\nimport { BloomEffect, ChromaticAberrationEffect, EffectComposer, EffectPass, RenderPass } from \"postprocessing\";\r\n\r\nApp({ el: 'canvas' });\r\n\r\nfunction App(conf) {\r\n  conf = {\r\n    fov: 75,\r\n    cameraZ: 75,\r\n    xyCoef: 50,\r\n    zCoef: 10,\r\n    lightIntensity: 0.7,\r\n    ambientColor: 0x000000,\r\n    light1Color: 0x050A30,\r\n    light2Color: 0x000C66,\r\n    light3Color: 0x0000FF,\r\n    light4Color: 0x7EC8E3,\r\n    ...conf\r\n  };\r\n\r\n  let renderer, scene, camera;\r\n  let width, height,cx, cy, wWidth, wHeight;\r\n  const TMath = THREE.Math;\r\n  let geometry, plane, material;\r\n  let composer;\r\n  let running = true;\r\n\r\n\r\n\r\n  // const simplex = new SimplexNoise();\r\n\r\n  // const mouse = new THREE.Vector2();\r\n  // const mousePlane = new THREE.Plane(new THREE.Vector3(0, 0, 1), 0);\r\n  // const mousePosition = new THREE.Vector3();\r\n  // const raycaster = new THREE.Raycaster();\r\n\r\n  // const noiseInput = document.getElementById('noiseInput');\r\n  // const heightInput = document.getElementById('heightInput');\r\n\r\n\r\n  init();\r\n\r\n  function init() {\r\n    const el = document.getElementById(conf.el);\r\n    renderer = new THREE.WebGLRenderer({\r\n        canvas: el,\r\n        powerPreference: \"high-performance\",\r\n        antialias: false,\r\n        stencil: false,\r\n        depth: false,\r\n        alpha: true });\r\n    camera = new THREE.PerspectiveCamera(conf.fov);\r\n    camera.position.z = conf.cameraZ;\r\n    renderer.setPixelRatio(window.devicePixelRatio);\r\n\r\n   \r\n    let observer = new IntersectionObserver((x) => {\r\n      var oe = x[0];\r\n      if(oe.isIntersecting) {\r\n        running = true;\r\n      } else {\r\n        running = false;\r\n      }\r\n    }, {threshold: 0.1});\r\n    observer.observe(el);\r\n    //const OrbitControl = oc(camera, el);\r\n    // controls = new OrbitControls( camera, el );\r\n//     controls.enableDamping = true\r\n// controls.dampingFactor = 0.25\r\n// controls.enableZoom = true;\r\n//     controls.autoRotate = true;\r\n    //  console.log(controls);\r\n//     controls.update();\r\n\r\n\r\n    updateSize();\r\n    window.addEventListener('resize', updateSize, false);\r\n\r\n    // document.addEventListener('mousemove', e => {\r\n    //   const v = new THREE.Vector3();\r\n    //   camera.getWorldDirection(v);\r\n    //   v.normalize();\r\n    //   mousePlane.normal = v;\r\n    //   mouse.x = (e.clientX / width) * 2 - 1;\r\n    //   mouse.y = - (e.clientY / height) * 2 + 1;\r\n    //   raycaster.setFromCamera(mouse, camera);\r\n    //   raycaster.ray.intersectPlane(mousePlane, mousePosition);\r\n    // });\r\n\r\n    //initScene();\r\n    initScene();\r\n    \r\n    //initGui();\r\n\trenderer.setAnimationLoop( animate );\r\n    initPost();\r\n\r\n    //initTween();\r\n  }\r\n\r\n  // function initTween() {\r\n  //   tween = new TWEEN.Tween(noiseInput.value)\r\n  //   .to(100, 2000)\r\n  //   .delay(1000)\r\n  //   .easing(TWEEN.Easing.Elastic.InOut);\r\n  // }\r\n\r\n\r\n\r\n  function initPost() {\r\n    composer = new EffectComposer(renderer);\r\n    composer.addPass(new RenderPass(scene, camera));\r\n    composer.addPass(new  EffectPass(camera, new ChromaticAberrationEffect()));\r\n    composer.addPass(new EffectPass(camera, new BloomEffect({\r\n        intensity:3\r\n    })));\r\n    // postProcessRender = new PostProcessRenderer(scene, camera, renderer); \r\n    // const pass = new ChromaticAberrationShaderPass();\r\n    // const bloom = new UnrealBloomPass();\r\n    // pass.rate = .2;\r\n    \r\n    // //bloom.radius \r\n    // postProcessRender.addComposer([pass,bloom]);\r\n  }\r\n\r\n  // function initGui() {\r\n  //   noiseInput.value = 101 - conf.xyCoef;\r\n  //   heightInput.value = conf.zCoef * 100 / 25;\r\n\r\n  //   noiseInput.addEventListener('input', e => {\r\n  //     conf.xyCoef = 101 - noiseInput.value;\r\n  //   });\r\n  //   heightInput.addEventListener('input', e => {\r\n  //     conf.zCoef = heightInput.value * 25 / 100;\r\n  //   });\r\n\r\n  // }\r\n\r\n  // function initScene2() {\r\n  //   scene = new THREE.Scene();\r\n  //   initLights();\r\n\r\n  //   let mat = new THREE.MeshLambertMaterial({ color: 0xffffff, opacity:0.9, side: THREE.DoubleSide});\r\n  //   let particles = new Three\r\n    \r\n  //   //mat = new THREE.MeshPhongMaterial({ color: 0xffffff });\r\n  //   // let mat = new THREE.MeshStandardMaterial({ color: 0x808080, roughness: 0.5, metalness: 0.8 });\r\n  //   let geo = new THREE.PlaneBufferGeometry(wWidth, wHeight, wWidth / 2, wHeight / 2);\r\n  //   plane = new THREE.Mesh(geo, shaderMaterial);\r\n  //   scene.add(plane);\r\n\r\n  //   plane.rotation.x = -Math.PI / 2 - 0.2;\r\n  //   plane.position.y = -62;\r\n  //   camera.position.z = 160;\r\n  // }\r\n\r\n  function initScene() {\r\n    scene = new THREE.Scene();\r\n    //scene.background = new THREE.Color(0xff1111);\r\n    //initLights();\r\n\r\n    geometry = new THREE.SphereBufferGeometry(10,40,30);\r\n    //material = new THREE.MeshBasicMaterial({color: 0x000000});\r\n    //material = new THREE.MeshStandardMaterial({ color: 0x808080, roughness: 0.5, metalness: 0.8 });\r\n    //material = new THREE.PointsMaterial({ color: 0xff0000 });\r\n    material = new THREE.ShaderMaterial({\r\n      uniforms: {\r\n        time: { value: 0},\r\n        //resolution: { value : new THREE.Vector4()},\r\n        uColor1: { value: new THREE.Color(0xffc300)},\r\n        uColor2: { value: new THREE.Color(0xffd60a)},\r\n        uColor3: { value: new THREE.Color(0x1954ec)}\r\n      },\r\n      transparent: true,\r\n      depthTest: false,\r\n      depthWrite: false,\r\n      vertexShader: vertexShader,\r\n      fragmentShader: fragmentShader,\r\n      blending: THREE.AdditiveBlending\r\n    })\r\n    //material = mat;\r\n    plane = new THREE.Points(geometry, material);\r\n\r\n    var number = geometry.index.array.length;\r\n    let randoms = new Float32Array(number);\r\n    let colorRandoms = new Float32Array(number);\r\n\r\n    for (let i = 0; i < number; i++) {\r\n      randoms.set([Math.random()],i);\r\n      colorRandoms.set([Math.random()],i);      \r\n    }\r\n\r\n    geometry.setAttribute(\"randoms\", new THREE.BufferAttribute(randoms,1));\r\n    geometry.setAttribute(\"colorRandoms\", new THREE.BufferAttribute(colorRandoms,1));\r\n    \r\n    //mat = new THREE.MeshPhongMaterial({ color: 0xffffff });\r\n    // let mat = new THREE.MeshStandardMaterial({ color: 0x808080, roughness: 0.5, metalness: 0.8 });\r\n    // let geo = new THREE.PlaneBufferGeometry(wWidth, wHeight, wWidth / 2, wHeight / 2);\r\n    // plane = new THREE.Mesh(geo, shaderMaterial);\r\n    scene.add(plane);\r\n\r\n    //plane.rotation.x = -Math.PI / 2 - 0.2;\r\n    //plane.position.y = -62;\r\n    camera.position.z = 18;\r\n  }\r\n\r\n\r\n  function animate() {\r\n    if(running) {\r\n      rotate();\r\n      composer.render();\r\n    }\r\n  };\r\n\r\n  function rotate() {\r\n    plane.rotation.x += .001;\r\n    plane.rotation.z += .002;\r\n    plane.rotation.y += .001;\r\n  }\r\n\r\n  // function animatePlane() {\r\n  //   gArray = plane.geometry.attributes.position.array;\r\n  //   //conf.xyCoef = 100;\r\n  //   const time = Date.now() * 0.0002;\r\n  //   conf.xyCoef = Math.abs(Math.sin(time * 0.8) * 100) +10;\r\n    \r\n  //   // console.log(conf.xyCoef);\r\n  //   for (let i = 0; i < gArray.length; i += 3) {\r\n  //     gArray[i + 2] = simplex.noise4D(gArray[i] / conf.xyCoef, gArray[i + 1] / conf.xyCoef, time, mouse.x + mouse.y) * conf.zCoef;\r\n  //   }\r\n  //   plane.geometry.attributes.position.needsUpdate = true;\r\n  //   // plane.geometry.computeBoundingSphere();\r\n  // }\r\n\r\n\r\n\r\n  function updateSize() {\r\n    width = 800;\r\n    cx = width / 2;\r\n    height = 800;\r\n    cy = height / 2;\r\n    if (renderer && camera) {\r\n      renderer.setSize(width, height);\r\n      camera.aspect = width / height;\r\n      camera.updateProjectionMatrix();\r\n      const wsize = getRendererSize();\r\n      wWidth = wsize[0];\r\n      wHeight = wsize[1];\r\n    }\r\n  }\r\n\r\n  function getRendererSize() {\r\n    const cam = new THREE.PerspectiveCamera(camera.fov, camera.aspect);\r\n    const vFOV = cam.fov * Math.PI / 180;\r\n    const height = 2 * Math.tan(vFOV / 2) * Math.abs(conf.cameraZ);\r\n    const width = height * cam.aspect;\r\n    return [width, height];\r\n  }\r\n}\r\n"],"names":["THREE.WebGLRenderer","THREE.PerspectiveCamera","THREE.Scene","THREE.SphereBufferGeometry","THREE.ShaderMaterial","THREE.Color","THREE.AdditiveBlending","THREE.Points","THREE.BufferAttribute"],"mappings":"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"}